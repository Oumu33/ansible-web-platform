version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ansible-web-postgres
    environment:
      POSTGRES_DB: ansible_web
      POSTGRES_USER: ansible_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ansible_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ansible_user -d ansible_web"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ansible-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ansible-web-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - ansible-network

  # Ansible Web后端API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ansible-web-backend
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://ansible_user:${POSTGRES_PASSWORD:-ansible_secure_password}@postgres:5432/ansible_web
      
      # Redis配置
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      
      # 安全配置
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # OAuth2配置
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID:-}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET:-}
      
      # CORS配置
      ALLOWED_HOSTS: '["http://localhost:3000","https://yourdomain.com"]'
      
      # 安全中间件配置
      SECURITY_MIDDLEWARE_ENABLED: true
      RATE_LIMIT_ENABLED: true
      IP_FILTER_ENABLED: true
      REQUEST_VALIDATION_ENABLED: true
      DEFAULT_RATE_LIMIT: 100
      AUTH_RATE_LIMIT: 10
      BURST_LIMIT: 20
      
      # HTTPS配置
      FORCE_HTTPS: ${FORCE_HTTPS:-false}
      
      # 应用配置
      DEBUG: ${DEBUG:-false}
      API_V1_STR: /api/v1
    volumes:
      - ansible_data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ansible-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ansible-web-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - ansible-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ansible_data:
    driver: local

networks:
  ansible-network:
    driver: bridge